[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "growth-lab-deep-search"
version = "0.1.0"
description = "An agentic RAG system that helps users query Growth Lab-specific unstructured data"
readme = "README.md"
requires-python = ">=3.12,<3.13"
license = { text = "CC-BY-NC-SA 4.0" }
authors = [
    { name = "Shreyas Gadgin Matha" },
    { name = "Karan Daryanani" },
    { name = "Santiago Segovia Baquero" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    # Core dependencies shared across all components
    "pydantic>=2",
    "python-dotenv>=1",
    "loguru",
    "tqdm",
]

[project.urls]
Homepage = "https://github.com/shreyasgm/gl-deep-search"
Repository = "https://github.com/shreyasgm/gl-deep-search"
"Bug Tracker" = "https://github.com/shreyasgm/gl-deep-search/issues"

[project.optional-dependencies]
# ETL pipeline dependencies

# made here a subset of dependencies just for the gl scraper which might change - we can maybe merge them after the final etl scrapers are ready?

growthlab_scraper = [
    #current setup
    "aiohttp",           # For async HTTP requests
    "pandas",            # Data manipulation
    "pyyaml",            # Config loading
    "beautifulsoup4",    # HTML parsing
    "pydantic>=2",       # Data validation
    "tqdm",              # Progress bars
    "lxml",              # Faster HTML parser for BeautifulSoup
    "jupyter",           # For notebook exploration
    "ipykernel",         # For notebook kernel
    "pytest",            # For testing
    "polars"
]

etl = [
    # Web scraping
    "beautifulsoup4",
    "requests",
    "lxml",
    "scrapy",
    "backoff",
    "asyncio",

    # PDF processing and OCR
    "langdetect",
    "unstructured",
    "docling",
    "marker-pdf",

    # Vector databases and embeddings
    "qdrant-client",
    "sentence-transformers",
    "openai",
    "cohere",

    # Data
    "pandas",
    "numpy",
    "seaborn",

    # Cloud storage
    "google-cloud-storage",
]

# Backend service dependencies
service = [
    # API framework
    "fastapi",
    "uvicorn",
    "pydantic-settings",

    # Vector search
    "qdrant-client",

    # LLM frameworks
    "langgraph",
    "langchain",
    "langchain-community",
    "langchain-openai",
    "langchain-anthropic",

    # LLM providers
    "openai",
    "anthropic",

    # Observability
    "langsmith",

    # Embeddings
    "sentence-transformers",
    "cohere",
]

# Frontend dependencies
frontend = [
    "streamlit",
    # "chainlit",
    "requests",
    # "plotly",
    "pandas",
    # "altair",
    # "streamlit-extras",
]

# Development tools
dev = [
    # Testing
    "pytest",
    "pytest-cov",
    "pytest-mock",

    # MCP for Cursor or other IDE
    "browser-use",
    "playwright",

    # Linting, formatting, type checking
    "ruff",
    "mypy",
    "types-requests",
    "types-PyYAML",

    # Pre-commit hooks
    "pre-commit",

    # Documentation
    "mkdocs",
    "mkdocs-material",
]

# Dependencies for running in production
prod = [
    "gunicorn",
    "google-cloud-logging",
    "google-cloud-secret-manager",
    "google-cloud-monitoring",
]

# All dependencies (for CI or full development environment)
all = [
    "growth-lab-deep-search[etl,service,frontend,dev,prod]",
]

[tool.ruff]
# Basic linting configuration
line-length = 88
target-version = "py312"
select = [
    "E",    # Critical errors
    "F",    # Pyflakes
    "B",    # Bug detection
    "I",    # Import sorting
    "N",    # Naming
    "T20",  # Print statements
    "UP",   # Python upgrades
    "D",    # Documentation (will be set to warning)
    "ANN",  # Type annotations (will be set to warning)
]

# Make documentation and type annotation rules generate warnings instead of errors
[tool.ruff.per-file-ignores]
"**/*" = ["D", "ANN"]  # Ignore these rules everywhere by default

# These rules will now show up as warnings in your IDE and CI,
# but won't cause failures
[tool.ruff.lint]
unfixable = ["D", "ANN"]

# Configure specific documentation rules
[tool.ruff.pydocstyle]
convention = "google"  # Use Google-style docstrings

# Configure Ruff to handle formatting
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

# Configure import sorting (replaces isort functionality)
[tool.ruff.isort]
known-first-party = ["gl_deep_search"]
force-single-line = false
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.hatch.build.targets.wheel]
packages = ["backend"]
